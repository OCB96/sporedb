// Code generated by protoc-gen-go.
// source: db/api/api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	db/api/api.proto

It has these top-level messages:
	Key
	Value
	KeyValue
	Values
	Boolean
	Transaction
	Receipt
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import db "gitlab.com/SporeDB/sporedb/db"
import version "gitlab.com/SporeDB/sporedb/db/version"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *Key) Reset()                    { *m = Key{} }
func (m *Key) String() string            { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()               {}
func (*Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Key) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type Value struct {
	Version *version.V `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Data    []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Value) Reset()                    { *m = Value{} }
func (m *Value) String() string            { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()               {}
func (*Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Value) GetVersion() *version.V {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Value) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type KeyValue struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *KeyValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Values struct {
	Version *version.V `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	Data    [][]byte   `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *Values) Reset()                    { *m = Values{} }
func (m *Values) String() string            { return proto.CompactTextString(m) }
func (*Values) ProtoMessage()               {}
func (*Values) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Values) GetVersion() *version.V {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *Values) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Boolean struct {
	Boolean bool `protobuf:"varint,1,opt,name=boolean" json:"boolean,omitempty"`
}

func (m *Boolean) Reset()                    { *m = Boolean{} }
func (m *Boolean) String() string            { return proto.CompactTextString(m) }
func (*Boolean) ProtoMessage()               {}
func (*Boolean) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Boolean) GetBoolean() bool {
	if m != nil {
		return m.Boolean
	}
	return false
}

type Transaction struct {
	Policy       string                `protobuf:"bytes,1,opt,name=policy" json:"policy,omitempty"`
	Requirements map[string]*version.V `protobuf:"bytes,2,rep,name=requirements" json:"requirements,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Operations   []*db.Operation       `protobuf:"bytes,3,rep,name=operations" json:"operations,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Transaction) GetPolicy() string {
	if m != nil {
		return m.Policy
	}
	return ""
}

func (m *Transaction) GetRequirements() map[string]*version.V {
	if m != nil {
		return m.Requirements
	}
	return nil
}

func (m *Transaction) GetOperations() []*db.Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type Receipt struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *Receipt) Reset()                    { *m = Receipt{} }
func (m *Receipt) String() string            { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()               {}
func (*Receipt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Receipt) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func init() {
	proto.RegisterType((*Key)(nil), "api.Key")
	proto.RegisterType((*Value)(nil), "api.Value")
	proto.RegisterType((*KeyValue)(nil), "api.KeyValue")
	proto.RegisterType((*Values)(nil), "api.Values")
	proto.RegisterType((*Boolean)(nil), "api.Boolean")
	proto.RegisterType((*Transaction)(nil), "api.Transaction")
	proto.RegisterType((*Receipt)(nil), "api.Receipt")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SporeDB service

type SporeDBClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	Members(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Values, error)
	Contains(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Boolean, error)
	Submit(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Receipt, error)
}

type sporeDBClient struct {
	cc *grpc.ClientConn
}

func NewSporeDBClient(cc *grpc.ClientConn) SporeDBClient {
	return &sporeDBClient{cc}
}

func (c *sporeDBClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := grpc.Invoke(ctx, "/api.SporeDB/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sporeDBClient) Members(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Values, error) {
	out := new(Values)
	err := grpc.Invoke(ctx, "/api.SporeDB/Members", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sporeDBClient) Contains(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Boolean, error) {
	out := new(Boolean)
	err := grpc.Invoke(ctx, "/api.SporeDB/Contains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sporeDBClient) Submit(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Receipt, error) {
	out := new(Receipt)
	err := grpc.Invoke(ctx, "/api.SporeDB/Submit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SporeDB service

type SporeDBServer interface {
	Get(context.Context, *Key) (*Value, error)
	Members(context.Context, *Key) (*Values, error)
	Contains(context.Context, *KeyValue) (*Boolean, error)
	Submit(context.Context, *Transaction) (*Receipt, error)
}

func RegisterSporeDBServer(s *grpc.Server, srv SporeDBServer) {
	s.RegisterService(&_SporeDB_serviceDesc, srv)
}

func _SporeDB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SporeDBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SporeDB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SporeDBServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _SporeDB_Members_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SporeDBServer).Members(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SporeDB/Members",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SporeDBServer).Members(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _SporeDB_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SporeDBServer).Contains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SporeDB/Contains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SporeDBServer).Contains(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _SporeDB_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SporeDBServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SporeDB/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SporeDBServer).Submit(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _SporeDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.SporeDB",
	HandlerType: (*SporeDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _SporeDB_Get_Handler,
		},
		{
			MethodName: "Members",
			Handler:    _SporeDB_Members_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _SporeDB_Contains_Handler,
		},
		{
			MethodName: "Submit",
			Handler:    _SporeDB_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db/api/api.proto",
}

func init() { proto.RegisterFile("db/api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x6e, 0x36, 0x6c, 0x53, 0xa6, 0x5d, 0x54, 0x46, 0x08, 0xa2, 0x48, 0x2b, 0x55, 0x86, 0xc3,
	0x82, 0x44, 0x2a, 0x85, 0x0b, 0xe2, 0x46, 0xf9, 0x3b, 0x44, 0x08, 0xc9, 0x8b, 0xf6, 0x6e, 0x37,
	0x73, 0xb0, 0x68, 0xe3, 0x60, 0x3b, 0x2b, 0xe5, 0x79, 0x78, 0x3a, 0xde, 0x02, 0xd9, 0x49, 0x20,
	0x4b, 0xb9, 0x70, 0x88, 0x32, 0xe3, 0xef, 0x67, 0xec, 0xcf, 0x86, 0x75, 0x25, 0xb7, 0xa2, 0x51,
	0xfe, 0xcb, 0x1b, 0xa3, 0x9d, 0xc6, 0x58, 0x34, 0x2a, 0x7b, 0x50, 0xc9, 0xad, 0x6d, 0xb4, 0xa1,
	0x7e, 0x31, 0x4b, 0x2b, 0xb9, 0xbd, 0x25, 0x63, 0x95, 0xae, 0xc7, 0x7f, 0x8f, 0xb0, 0x27, 0x10,
	0x97, 0xd4, 0xe1, 0x1a, 0xe2, 0x6f, 0xd4, 0xa5, 0xd1, 0x26, 0xba, 0xba, 0xcf, 0x7d, 0xc9, 0xde,
	0xc2, 0xf9, 0x8d, 0x38, 0xb4, 0x84, 0xcf, 0x20, 0x19, 0x24, 0x01, 0x5e, 0x16, 0x90, 0x8f, 0x16,
	0x37, 0x7c, 0x84, 0x10, 0xe1, 0x5e, 0x25, 0x9c, 0x48, 0xcf, 0x36, 0xd1, 0xd5, 0x8a, 0x87, 0x9a,
	0x15, 0xb0, 0x28, 0xa9, 0xeb, 0x5d, 0x4e, 0x06, 0xe0, 0x23, 0x38, 0xbf, 0xf5, 0xd0, 0x20, 0xe9,
	0x1b, 0xb6, 0x83, 0x79, 0x10, 0xd8, 0xff, 0x9e, 0x1b, 0xff, 0x9e, 0xfb, 0x14, 0x92, 0x9d, 0xd6,
	0x07, 0x12, 0x35, 0xa6, 0x90, 0xc8, 0xbe, 0x0c, 0x26, 0x0b, 0x3e, 0xb6, 0xec, 0x67, 0x04, 0xcb,
	0xaf, 0x46, 0xd4, 0x56, 0xec, 0x9d, 0x37, 0x7a, 0x0c, 0xf3, 0x46, 0x1f, 0xd4, 0x7e, 0xdc, 0xe3,
	0xd0, 0xe1, 0x47, 0x58, 0x19, 0xfa, 0xde, 0x2a, 0x43, 0x47, 0xaa, 0x9d, 0x0d, 0x83, 0x96, 0x05,
	0xcb, 0x7d, 0xe2, 0x13, 0x7d, 0xce, 0x27, 0xa4, 0x0f, 0xb5, 0x33, 0x1d, 0xbf, 0xa3, 0xc3, 0x97,
	0x00, 0xba, 0x21, 0x23, 0x3c, 0xd9, 0xa6, 0x71, 0x70, 0xb9, 0xc8, 0x2b, 0x99, 0x7f, 0x19, 0x57,
	0xf9, 0x84, 0x90, 0x95, 0xf0, 0xf0, 0xc4, 0xf1, 0x1f, 0x21, 0x6e, 0xa6, 0x21, 0xde, 0x8d, 0xa8,
	0x07, 0xde, 0x9c, 0xbd, 0x8e, 0xd8, 0x25, 0x24, 0x9c, 0xf6, 0xa4, 0x1a, 0xe7, 0xf3, 0x6a, 0x5b,
	0x55, 0x0d, 0x1e, 0xa1, 0x2e, 0x7e, 0x44, 0x90, 0x5c, 0xfb, 0xd7, 0xf2, 0x7e, 0x87, 0x97, 0x10,
	0x7f, 0x22, 0x87, 0x8b, 0x70, 0xbe, 0x92, 0xba, 0x0c, 0x42, 0x15, 0xee, 0x84, 0xcd, 0x90, 0x41,
	0xf2, 0x99, 0x8e, 0x92, 0x8c, 0x9d, 0x50, 0x96, 0x7f, 0x28, 0x96, 0xcd, 0xf0, 0x39, 0x2c, 0xde,
	0xe9, 0xda, 0x09, 0x55, 0x5b, 0xbc, 0x18, 0x49, 0x01, 0xcd, 0x56, 0xa1, 0x1d, 0x2e, 0x87, 0xcd,
	0xf0, 0x05, 0xcc, 0xaf, 0x5b, 0x79, 0x54, 0x0e, 0xd7, 0x7f, 0x07, 0x3a, 0x70, 0x87, 0x7d, 0xb3,
	0x99, 0x9c, 0x87, 0x07, 0xfb, 0xea, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x34, 0x14, 0x69,
	0xf3, 0x02, 0x00, 0x00,
}
