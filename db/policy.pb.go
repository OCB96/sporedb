// Code generated by protoc-gen-go.
// source: db/policy.proto
// DO NOT EDIT!

package db

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Policy struct {
	Uuid        string                     `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Comment     string                     `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
	Endorsers   []*Endorser                `protobuf:"bytes,3,rep,name=endorsers" json:"endorsers,omitempty"`
	Quorum      uint64                     `protobuf:"varint,4,opt,name=quorum" json:"quorum,omitempty"`
	Timeout     *google_protobuf1.Duration `protobuf:"bytes,5,opt,name=timeout" json:"timeout,omitempty"`
	GracePeriod *google_protobuf1.Duration `protobuf:"bytes,6,opt,name=grace_period,json=gracePeriod" json:"grace_period,omitempty"`
	MaxSize     uint64                     `protobuf:"varint,7,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	MaxOpSize   uint64                     `protobuf:"varint,8,opt,name=max_op_size,json=maxOpSize" json:"max_op_size,omitempty"`
	Specs       []*OSpec                   `protobuf:"bytes,9,rep,name=specs" json:"specs,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Policy) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Policy) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Policy) GetEndorsers() []*Endorser {
	if m != nil {
		return m.Endorsers
	}
	return nil
}

func (m *Policy) GetQuorum() uint64 {
	if m != nil {
		return m.Quorum
	}
	return 0
}

func (m *Policy) GetTimeout() *google_protobuf1.Duration {
	if m != nil {
		return m.Timeout
	}
	return nil
}

func (m *Policy) GetGracePeriod() *google_protobuf1.Duration {
	if m != nil {
		return m.GracePeriod
	}
	return nil
}

func (m *Policy) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *Policy) GetMaxOpSize() uint64 {
	if m != nil {
		return m.MaxOpSize
	}
	return 0
}

func (m *Policy) GetSpecs() []*OSpec {
	if m != nil {
		return m.Specs
	}
	return nil
}

type Endorser struct {
	Public  []byte `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	Comment string `protobuf:"bytes,2,opt,name=comment" json:"comment,omitempty"`
}

func (m *Endorser) Reset()                    { *m = Endorser{} }
func (m *Endorser) String() string            { return proto.CompactTextString(m) }
func (*Endorser) ProtoMessage()               {}
func (*Endorser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Endorser) GetPublic() []byte {
	if m != nil {
		return m.Public
	}
	return nil
}

func (m *Endorser) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

type OSpec struct {
	// Types that are valid to be assigned to Key:
	//	*OSpec_Name
	//	*OSpec_Regex
	Key               isOSpec_Key    `protobuf_oneof:"key"`
	MaxSize           uint64         `protobuf:"varint,4,opt,name=max_size,json=maxSize" json:"max_size,omitempty"`
	AllowedOperations []Operation_Op `protobuf:"varint,5,rep,packed,name=allowed_operations,json=allowedOperations,enum=db.Operation_Op" json:"allowed_operations,omitempty"`
}

func (m *OSpec) Reset()                    { *m = OSpec{} }
func (m *OSpec) String() string            { return proto.CompactTextString(m) }
func (*OSpec) ProtoMessage()               {}
func (*OSpec) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type isOSpec_Key interface {
	isOSpec_Key()
}

type OSpec_Name struct {
	Name string `protobuf:"bytes,1,opt,name=name,oneof"`
}
type OSpec_Regex struct {
	Regex string `protobuf:"bytes,2,opt,name=regex,oneof"`
}

func (*OSpec_Name) isOSpec_Key()  {}
func (*OSpec_Regex) isOSpec_Key() {}

func (m *OSpec) GetKey() isOSpec_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *OSpec) GetName() string {
	if x, ok := m.GetKey().(*OSpec_Name); ok {
		return x.Name
	}
	return ""
}

func (m *OSpec) GetRegex() string {
	if x, ok := m.GetKey().(*OSpec_Regex); ok {
		return x.Regex
	}
	return ""
}

func (m *OSpec) GetMaxSize() uint64 {
	if m != nil {
		return m.MaxSize
	}
	return 0
}

func (m *OSpec) GetAllowedOperations() []Operation_Op {
	if m != nil {
		return m.AllowedOperations
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*OSpec) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _OSpec_OneofMarshaler, _OSpec_OneofUnmarshaler, _OSpec_OneofSizer, []interface{}{
		(*OSpec_Name)(nil),
		(*OSpec_Regex)(nil),
	}
}

func _OSpec_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*OSpec)
	// key
	switch x := m.Key.(type) {
	case *OSpec_Name:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Name)
	case *OSpec_Regex:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Regex)
	case nil:
	default:
		return fmt.Errorf("OSpec.Key has unexpected type %T", x)
	}
	return nil
}

func _OSpec_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*OSpec)
	switch tag {
	case 1: // key.name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &OSpec_Name{x}
		return true, err
	case 2: // key.regex
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Key = &OSpec_Regex{x}
		return true, err
	default:
		return false, nil
	}
}

func _OSpec_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*OSpec)
	// key
	switch x := m.Key.(type) {
	case *OSpec_Name:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Name)))
		n += len(x.Name)
	case *OSpec_Regex:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Regex)))
		n += len(x.Regex)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Policy)(nil), "db.Policy")
	proto.RegisterType((*Endorser)(nil), "db.Endorser")
	proto.RegisterType((*OSpec)(nil), "db.OSpec")
}

func init() { proto.RegisterFile("db/policy.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x51, 0xdd, 0x6a, 0xdb, 0x30,
	0x18, 0xad, 0x13, 0x3b, 0x89, 0xbf, 0x84, 0x6e, 0x13, 0xa3, 0xa8, 0xbd, 0xe8, 0x4c, 0xae, 0xcc,
	0x2e, 0x1c, 0x48, 0x6f, 0x0b, 0x83, 0xb1, 0x41, 0xef, 0x52, 0xd4, 0x07, 0x08, 0xb6, 0xf5, 0xcd,
	0x88, 0x59, 0x96, 0x26, 0x59, 0xcc, 0xed, 0x93, 0xec, 0x95, 0xf6, 0x56, 0x23, 0x92, 0xbd, 0x91,
	0x8b, 0xd1, 0x3b, 0x9f, 0x1f, 0x7d, 0x9c, 0x73, 0x0c, 0x6f, 0x78, 0xb5, 0xd3, 0xaa, 0x15, 0xf5,
	0x73, 0xa1, 0x8d, 0xea, 0x15, 0x99, 0xf1, 0xea, 0xe6, 0x92, 0x57, 0x3b, 0xab, 0x95, 0xc1, 0xc0,
	0xdd, 0xdc, 0x36, 0x4a, 0x35, 0x2d, 0xee, 0x3c, 0xaa, 0xdc, 0xb7, 0x1d, 0x77, 0xa6, 0xec, 0x85,
	0xea, 0x82, 0xbe, 0xfd, 0x3d, 0x83, 0xc5, 0xa3, 0x3f, 0x42, 0x08, 0xc4, 0xce, 0x09, 0x4e, 0xa3,
	0x2c, 0xca, 0x53, 0xe6, 0xbf, 0x09, 0x85, 0x65, 0xad, 0xa4, 0xc4, 0xae, 0xa7, 0x33, 0x4f, 0x4f,
	0x90, 0x7c, 0x84, 0x14, 0x3b, 0xae, 0x8c, 0x45, 0x63, 0xe9, 0x3c, 0x9b, 0xe7, 0xeb, 0xfd, 0xa6,
	0xe0, 0x55, 0xf1, 0x75, 0x24, 0xd9, 0x3f, 0x99, 0x5c, 0xc1, 0xe2, 0x87, 0x53, 0xc6, 0x49, 0x1a,
	0x67, 0x51, 0x1e, 0xb3, 0x11, 0x91, 0x3b, 0x58, 0xf6, 0x42, 0xa2, 0x72, 0x3d, 0x4d, 0xb2, 0x28,
	0x5f, 0xef, 0xaf, 0x8b, 0x10, 0xb7, 0x98, 0xe2, 0x16, 0x5f, 0xc6, 0xb8, 0x6c, 0x72, 0x92, 0x7b,
	0xd8, 0x34, 0xa6, 0xac, 0xf1, 0xa8, 0xd1, 0x08, 0xc5, 0xe9, 0xe2, 0xb5, 0x97, 0x6b, 0x6f, 0x7f,
	0xf4, 0x6e, 0x72, 0x0d, 0x2b, 0x59, 0x0e, 0x47, 0x2b, 0x5e, 0x90, 0x2e, 0x7d, 0x98, 0xa5, 0x2c,
	0x87, 0x27, 0xf1, 0x82, 0xe4, 0x16, 0xd6, 0x27, 0x49, 0xe9, 0xa0, 0xae, 0xbc, 0x9a, 0xca, 0x72,
	0x38, 0x68, 0xaf, 0x7f, 0x80, 0xc4, 0x6a, 0xac, 0x2d, 0x4d, 0x7d, 0xdb, 0xf4, 0xd4, 0xf6, 0xf0,
	0xa4, 0xb1, 0x66, 0x81, 0xdf, 0xde, 0xc3, 0x6a, 0x6a, 0x7f, 0xaa, 0xac, 0x5d, 0xd5, 0x8a, 0xda,
	0xcf, 0xb9, 0x61, 0x23, 0xfa, 0xff, 0xa0, 0xdb, 0x5f, 0x11, 0x24, 0xfe, 0x1c, 0x79, 0x0f, 0x71,
	0x57, 0x4a, 0x0c, 0x3f, 0xe2, 0xe1, 0x82, 0x79, 0x44, 0xae, 0x20, 0x31, 0xd8, 0xe0, 0x10, 0xde,
	0x3d, 0x5c, 0xb0, 0x00, 0xcf, 0x1a, 0xc5, 0xe7, 0x8d, 0x3e, 0x01, 0x29, 0xdb, 0x56, 0xfd, 0x44,
	0x7e, 0x54, 0x1a, 0xc3, 0x1c, 0x96, 0x26, 0xd9, 0x3c, 0xbf, 0xdc, 0xbf, 0xf5, 0xf1, 0x27, 0xb6,
	0x38, 0x68, 0xf6, 0x6e, 0xf4, 0xfe, 0x25, 0xed, 0xe7, 0x04, 0xe6, 0xdf, 0xf1, 0xb9, 0x5a, 0xf8,
	0x51, 0xef, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x17, 0xcb, 0x76, 0x72, 0x02, 0x00, 0x00,
}
